object RobotTest {
  def move(moves: String, accu: List[(Int, Int)], direction: Int): List[(Int, Int)] = {
    if (moves.isEmpty) { accu }
    else {
      if (moves.head == 'R') { move(moves.tail, accu, direction - 1) }
      else if (moves.head == 'L') { move(moves.tail, accu, direction + 1) }
      else {
        if (direction == 0) {
          val newCoordinate: (Int, Int) = (accu.last._1 + 1, accu.last._2)
          move(moves.tail, accu.:+(newCoordinate), direction)
        }
        else if (direction == 1) {
          val newCoordinate: (Int, Int) = (accu.last._1, accu.last._2 + 1)
          move(moves.tail, accu.:+(newCoordinate), direction)
        }
        else if (direction == 2) {
          val newCoordinate: (Int, Int) = (accu.last._1 - 1, accu.last._2)
          move(moves.tail, accu.:+(newCoordinate), direction)
        }
        else {
          val newCoordinate: (Int, Int) = (accu.last._1, accu.last._2 - 1)
          move(moves.tail, accu.:+(newCoordinate), direction)
        }
      }

    }
  }                                               //> move: (moves: String, accu: List[(Int, Int)], direction: Int)List[(Int, Int
                                                  //| )]
  
  def generateSequence(a: Int): String = {
  	if (a == 0) {"F"}
  	else {generateSequence(a - 1) + "L" + generateSequence(a - 1) + "R"}
  }                                               //> generateSequence: (a: Int)String
  
  move(generateSequence(0), List((0, 0)), 0)      //> res0: List[(Int, Int)] = List((0,0), (1,0), (1,1), (1,2), (0,2), (0,3), (-1
                                                  //| ,3), (-2,3), (-2,2), (-2,3), (-3,3), (-4,3), (-4,2), (-5,2), (-5,1), (-5,0)
                                                  //| , (-5,-1))
}